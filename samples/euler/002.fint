
fib = a => b => [a, _ => fib b $ add a b];

modLarge = b => a => (lt a $ mult b b) (_ => mod b a) (_ => mod b $ modLarge (mult b b) a) _;
mod2 = modLarge 2;

takeWhile = pred => tup => (pred $ fst tup) (_ => [fst tup, _ => takeWhile pred $ snd tup _]) (_ => _) _;

printlle = tup => do
  (print $ fst tup)
  ((eq _ $ snd tup _) (_ => _) (_ => printlle $ snd tup _) _);

filterlle = pred => tup => (pred $ fst tup)
                            (_ => [fst tup, _ => filterlle pred $ snd tup _])
                            (_ => (neq _ $ snd tup _) (_ => filterlle pred $ snd tup _) (_ => _) _) _;

sumll = tup => (eq _ $ snd tup _)
                  (_ => fst tup)
                  (_ => add (fst tup) (sumll $ snd tup _)) _; 

main = print $ sumll $ filterlle (x => eq 0 $ mod2 x) $ takeWhile (x => lt x 4000000) $ fib 0 1;
main = printlle $ filterlle (x => eq 0 $ mod2 x) $ fib 0 1;
