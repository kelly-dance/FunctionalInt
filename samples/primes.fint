filterll = pred => tup => (pred $ fst tup)
                            (_ => [fst tup, _ => filterll pred $ snd tup _])
                            (_ => filterll pred $ snd tup _) _;

printll = tup => do
  (print $ fst tup)
  (printll $ snd tup _);

primes = sieve $ countFrom 2
  where
    countFrom = n => [n, _ => countFrom $ succ n];
    sieve = tup => [fst tup, _ => sieve $ filterll (x => neq 0 $ mod (fst tup) x) $ snd tup _];

main = printll primes;
