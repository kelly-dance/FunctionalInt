filterll = pred => tup => (pred $ fst tup)
                            (_ => [fst tup, _ => filterll pred $ snd tup _])
                            (_ => (neq _ $ snd tup _) (_ => filterll pred $ snd tup _) (_ => _) _) _;

or = a => b => a true b;

sumll = tup => (eq _ $ snd tup _) (_ => fst tup) (_ => add (fst tup) (sumll $ snd tup _)) _; 

printll = tup => do
  (print $ fst tup)
  ((eq _ $ snd tup _) (_ => _) (_ => printll $ snd tup _) _);

range = a => b => (lt a b) ([a, _ => range (succ a) b]) _;

main = print $ sumll $ filterll (n => or (eq 0 $ mod n 3) (eq 0 $ mod n 5)) $ range 1 1000;
